from Constants import PC_1, PC_2, E, Sbox, P, PI_1, IP
from BinaryOps import bitwise_xor


img



def _group_by(string, by):
    # Returns groups the block of message into 64 bits for input

    # Pad the string with zeros if needed to make the last block valid input
    padding_needed = (by - (len(string) % by)) % by
    padded_string = string + "0" * padding_needed

    return [padded_string[i : i + by] for i in range(0, len(padded_string), by)]


def _permute_with(string, permutation):
    # Returns the string in order of the permutation mentioned in the permutation argument

    return "".join([string[i - 1] for i in permutation])


def f(r, k):
    # F function

    # Expansion of half from 32 to 48 bits
    e = _permute_with(r, E)
    # XOR with the subkey
    k_xor_e = bitwise_xor(k, e)


    # S box substitution to change from 6 bits to 4 bits
    S = ""
    blocks = _group_by(k_xor_e, 6)

    for n in range(8):
        # i = 2 bit value of first and last bit
        i = int(blocks[n][0] + blocks[n][-1], 2)

        # j = 4 bit value of middle 4 bits
        j = int(blocks[n][1:-1], 2)

        # Look up the value in the S box
        S += bin(Sbox[n][i][j])[2:].zfill(4)

    # Transposition of 32 bits
    return _permute_with(S, P)


def encrypt(message, key_main, length_image, **kwargs):
    # DES Encryption algorithm

    # Key conversion to binary
    key_int = int.from_bytes(key_main, byteorder="big")
    key = bin(key_int)[2:]

    assert len(key) > 0, "No input key to perform encryption"

    # Generating subkeys

    pc1_key = _permute_with(key, PC_1)
    # Split and store left and right halves of the key (28 bit) in separate lists
    C = [pc1_key[:28]]
    D = [pc1_key[28:]]

    # Shift left by 1 or 2 bits depending on the round and append to the list of subkeys
    for i in range(16):
        shift = 1 if i in (0, 1, 8, 15) else 2
        C.append(bin(int(C[-1], 2) << shift)[2:].zfill(28))
        D.append(bin(int(D[-1], 2) << shift)[2:].zfill(28))

    # List of subkeys
    K = []
    for i in range(16):
        CD = C[i + 1] + D[i + 1]
        K.append(_permute_with(CD, PC_2))

    # Reverse the list of subkeys if decrypting
    if kwargs.get("decrypt"):
        K = list(reversed(K))

    # Message encryption
    result = ""

    # Split message into blocks and run 16 rounds of encryption for each block
    for block in _group_by(message, 64):
        # Initial permutation for input
        PI = _permute_with(block, IP)

        # Split into 2 halves
        L = [PI[:32]]
        R = [PI[32:]]

        # Rounds
        for i in range(16):
            Ln = R[-1]
            Rn = bitwise_xor(L[-1], f(R[-1], K[i]))

            # Result of the round
            L.append(Ln)
            R.append(Rn)

        # Final permutation
        RL = R[-1] + L[-1]

        # Inverse permutation
        result += _permute_with(RL, PI_1)

    return result


def decrypt(string, key_main, length, **kwargs):
    # DES Decryption algorithm

    result = encrypt(string, key_main, length, decrypt=True, **kwargs)
    result = result[:length]
    return result


if __name__ == "__main__":
    print("DES Encryption and Decryption")
    print("\n")
    print("Encrypting and decrypting a string hardcoded in the program")

    # Create ciphertext
    cipher = encrypt(
        img,
        b"\xf8\xfd\x8f\x13\xe8\xad\xf7\xa5",
        len(img),
    )
    print("Encrypted text: %s" % cipher)
    # print(type(cipher))

    # Decipher it to plaintext
    decipher = decrypt(
        cipher,
        b"\xf8\xfd\x8f\x13\xe8\xad\xf7\xa5",
        len(img),
    )
    # print(len(decipher))
    print("Decrypted text: %s" % decipher)

    # Check if the original and deciphered text are the same
    if img == decipher:
        print("Success")
    else:
        print("Failed")